"use strict";

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const bodyParser = require("body-parser");
const compression = require("compression");
const connect = require("connect");
const Cookies = require("cookies");
const http = require("http");
const st = require("st");
const Url = require("url");

function handleBuildFiles(project) {
	var globalFileHandler = st({
		path: ".",
		index: false,
		dot: true,
		passthrough: true,
		cache: false
	});

	var routes = {};

	for (var partName in project.output) {
		var url = project.output[partName];
		var path = project.builds[partName];

		if (url && path) {
			routes[url] = "/" + path;
		}
	}

	return (req, res, next) => {
		var path = routes[req.url];

		if (!path) {
			next();
			return;
		}

		var originalUrl = req.url;
		req.url = path;

		globalFileHandler(req, res, () => {
			req.url = originalUrl;
			next();
		});
	};
}

function Server(site) {
	this.site = site;

	this.setupConnect();
}

Server.prototype.setupConnect = function setupConnect() {
	this.app = connect();

	this.app.use(compression());

	this.app.use(bodyParser.urlencoded({ extended: true }));

	this.app.use(Cookies.connect());

	this.app.use((req, res, next) => this.handle(null, req, res).then(next, next));

	// TODO: only in debug mode
	this.app.use(handleBuildFiles(this.site.project));

	this.app.use(this.fileHandler());

	this.app.use((req, res, next) => this.handle(404, req, res).then(next, next));
	this.app.use((err, req, res, next) => this.handle(err, req, res).then(next, next));
};

Server.prototype.fileHandler = function fileHandler() {
	var opts = {};

	// we need this option or the file handler will serve our 404s
	opts.passthrough = true;

	for (var i in this.site.project.files) {
		opts[i] = this.site.project.files[i];
	}

	if (process.env.DEBUG) {
		opts.cache = false;
	}

	return st(opts);
};

Server.prototype.handle = (() => {
	var ref = (0, _asyncToGenerator3.default)(function* (err, req, res) {
		if (err === 404) {
			err = new Error("Page not found");
			err.httpCode = 404;
		}

		if (err && !err.httpCode) {
			err.httpCode = 500;
		}

		var url = Url.parse(req.url);
		var path = err ? "error-" + err.httpCode : url.pathname;

		var scope = this.site.resolve(path);

		if (!scope) {
			return err;
		}

		scope.request = req;

		var output = yield this.site.process(scope);

		res.writeHead(output.status, output.headers);
		res.end(output.content);
	});

	function handle(_x, _x2, _x3) {
		return ref.apply(this, arguments);
	}

	return handle;
})();

Server.prototype.start = function start(network, callback) {
	if (this.httpServer && this.httpServer.address()) {
		this.stop(this.start.bind(this, callback));
		return;
	}

	this.httpServer = http.createServer(this.app);
	this.httpServer.listen(network, "127.0.0.1", () => callback(this.httpServer.address()));
};

Server.prototype.stop = function stop(callback) {
	this.httpServer.close(callback);
};

module.exports = Server;
//# sourceMappingURL=data:application/json;base64,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QXhCOztBQUl4QixPQUFPLE9BQVAsR0FBaUIsTUFBakIiLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYm9keVBhcnNlciA9IHJlcXVpcmUoXCJib2R5LXBhcnNlclwiKVxyXG5jb25zdCBjb21wcmVzc2lvbiA9IHJlcXVpcmUoXCJjb21wcmVzc2lvblwiKVxyXG5jb25zdCBjb25uZWN0ID0gcmVxdWlyZShcImNvbm5lY3RcIilcclxuY29uc3QgQ29va2llcyA9IHJlcXVpcmUoXCJjb29raWVzXCIpXHJcbmNvbnN0IGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKVxyXG5jb25zdCBzdCA9IHJlcXVpcmUoXCJzdFwiKVxyXG5jb25zdCBVcmwgPSByZXF1aXJlKFwidXJsXCIpXHJcblxyXG5mdW5jdGlvbiBoYW5kbGVCdWlsZEZpbGVzKHByb2plY3QpIHtcclxuXHR2YXIgZ2xvYmFsRmlsZUhhbmRsZXIgPSBzdCh7XHJcblx0XHRwYXRoOiBcIi5cIixcclxuXHRcdGluZGV4OiBmYWxzZSxcclxuXHRcdGRvdDogdHJ1ZSxcclxuXHRcdHBhc3N0aHJvdWdoOiB0cnVlLFxyXG5cdFx0Y2FjaGU6IGZhbHNlLFxyXG5cdH0pXHJcblxyXG5cdHZhciByb3V0ZXMgPSB7fVxyXG5cclxuXHRmb3IgKHZhciBwYXJ0TmFtZSBpbiBwcm9qZWN0Lm91dHB1dCkge1xyXG5cdFx0dmFyIHVybCA9IHByb2plY3Qub3V0cHV0W3BhcnROYW1lXVxyXG5cdFx0dmFyIHBhdGggPSBwcm9qZWN0LmJ1aWxkc1twYXJ0TmFtZV1cclxuXHJcblx0XHRpZiAodXJsICYmIHBhdGgpIHtcclxuXHRcdFx0cm91dGVzW3VybF0gPSBcIi9cIiArIHBhdGhcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiAocmVxLCByZXMsIG5leHQpID0+IHtcclxuXHRcdHZhciBwYXRoID0gcm91dGVzW3JlcS51cmxdXHJcblxyXG5cdFx0aWYgKCFwYXRoKSB7XHJcblx0XHRcdG5leHQoKVxyXG5cdFx0XHRyZXR1cm5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgb3JpZ2luYWxVcmwgPSByZXEudXJsXHJcblx0XHRyZXEudXJsID0gcGF0aFxyXG5cclxuXHRcdGdsb2JhbEZpbGVIYW5kbGVyKHJlcSwgcmVzLCAoKSA9PiB7XHJcblx0XHRcdHJlcS51cmwgPSBvcmlnaW5hbFVybFxyXG5cdFx0XHRuZXh0KClcclxuXHRcdH0pXHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBTZXJ2ZXIoc2l0ZSkge1xyXG5cdHRoaXMuc2l0ZSA9IHNpdGVcclxuXHJcblx0dGhpcy5zZXR1cENvbm5lY3QoKVxyXG59XHJcblxyXG5TZXJ2ZXIucHJvdG90eXBlLnNldHVwQ29ubmVjdCA9IGZ1bmN0aW9uIHNldHVwQ29ubmVjdCgpIHtcclxuXHR0aGlzLmFwcCA9IGNvbm5lY3QoKVxyXG5cclxuXHR0aGlzLmFwcC51c2UoY29tcHJlc3Npb24oKSlcclxuXHJcblx0dGhpcy5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKVxyXG5cclxuXHR0aGlzLmFwcC51c2UoQ29va2llcy5jb25uZWN0KCkpXHJcblxyXG5cdHRoaXMuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHRoaXMuaGFuZGxlKG51bGwsIHJlcSwgcmVzKS50aGVuKG5leHQsIG5leHQpKVxyXG5cclxuXHQvLyBUT0RPOiBvbmx5IGluIGRlYnVnIG1vZGVcclxuXHR0aGlzLmFwcC51c2UoaGFuZGxlQnVpbGRGaWxlcyh0aGlzLnNpdGUucHJvamVjdCkpXHJcblxyXG5cdHRoaXMuYXBwLnVzZSh0aGlzLmZpbGVIYW5kbGVyKCkpXHJcblxyXG5cdHRoaXMuYXBwLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHRoaXMuaGFuZGxlKDQwNCwgcmVxLCByZXMpLnRoZW4obmV4dCwgbmV4dCkpXHJcblx0dGhpcy5hcHAudXNlKChlcnIsIHJlcSwgcmVzLCBuZXh0KSA9PiB0aGlzLmhhbmRsZShlcnIsIHJlcSwgcmVzKS50aGVuKG5leHQsIG5leHQpKVxyXG59XHJcblxyXG5TZXJ2ZXIucHJvdG90eXBlLmZpbGVIYW5kbGVyID0gZnVuY3Rpb24gZmlsZUhhbmRsZXIoKSB7XHJcblx0dmFyIG9wdHMgPSB7fVxyXG5cclxuXHQvLyB3ZSBuZWVkIHRoaXMgb3B0aW9uIG9yIHRoZSBmaWxlIGhhbmRsZXIgd2lsbCBzZXJ2ZSBvdXIgNDA0c1xyXG5cdG9wdHMucGFzc3Rocm91Z2ggPSB0cnVlXHJcblxyXG5cdGZvciAodmFyIGkgaW4gdGhpcy5zaXRlLnByb2plY3QuZmlsZXMpIHtcclxuXHRcdG9wdHNbaV0gPSB0aGlzLnNpdGUucHJvamVjdC5maWxlc1tpXVxyXG5cdH1cclxuXHJcblx0aWYgKHByb2Nlc3MuZW52LkRFQlVHKSB7XHJcblx0XHRvcHRzLmNhY2hlID0gZmFsc2VcclxuXHR9XHJcblxyXG5cdHJldHVybiBzdChvcHRzKVxyXG59XHJcblxyXG5TZXJ2ZXIucHJvdG90eXBlLmhhbmRsZSA9IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZShlcnIsIHJlcSwgcmVzKSB7XHJcblx0aWYgKGVyciA9PT0gNDA0KSB7XHJcblx0XHRlcnIgPSBuZXcgRXJyb3IoXCJQYWdlIG5vdCBmb3VuZFwiKVxyXG5cdFx0ZXJyLmh0dHBDb2RlID0gNDA0XHJcblx0fVxyXG5cclxuXHRpZiAoZXJyICYmICFlcnIuaHR0cENvZGUpIHtcclxuXHRcdGVyci5odHRwQ29kZSA9IDUwMFxyXG5cdH1cclxuXHJcblx0dmFyIHVybCA9IFVybC5wYXJzZShyZXEudXJsKVxyXG5cdHZhciBwYXRoID0gZXJyID8gXCJlcnJvci1cIiArIGVyci5odHRwQ29kZSA6IHVybC5wYXRobmFtZVxyXG5cclxuXHR2YXIgc2NvcGUgPSB0aGlzLnNpdGUucmVzb2x2ZShwYXRoKVxyXG5cclxuXHRpZiAoIXNjb3BlKSB7XHJcblx0XHRyZXR1cm4gZXJyXHJcblx0fVxyXG5cclxuXHRzY29wZS5yZXF1ZXN0ID0gcmVxXHJcblxyXG5cdHZhciBvdXRwdXQgPSBhd2FpdCB0aGlzLnNpdGUucHJvY2VzcyhzY29wZSlcclxuXHJcblx0cmVzLndyaXRlSGVhZChvdXRwdXQuc3RhdHVzLCBvdXRwdXQuaGVhZGVycylcclxuXHRyZXMuZW5kKG91dHB1dC5jb250ZW50KVxyXG59XHJcblxyXG5TZXJ2ZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQobmV0d29yaywgY2FsbGJhY2spIHtcclxuXHRpZiAodGhpcy5odHRwU2VydmVyICYmIHRoaXMuaHR0cFNlcnZlci5hZGRyZXNzKCkpIHtcclxuXHRcdHRoaXMuc3RvcCh0aGlzLnN0YXJ0LmJpbmQodGhpcywgY2FsbGJhY2spKVxyXG5cdFx0cmV0dXJuXHJcblx0fVxyXG5cclxuXHR0aGlzLmh0dHBTZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcih0aGlzLmFwcClcclxuXHR0aGlzLmh0dHBTZXJ2ZXIubGlzdGVuKG5ldHdvcmssIFwiMTI3LjAuMC4xXCIsICgpID0+IGNhbGxiYWNrKHRoaXMuaHR0cFNlcnZlci5hZGRyZXNzKCkpKVxyXG59XHJcblxyXG5TZXJ2ZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiBzdG9wKGNhbGxiYWNrKSB7XHJcblx0dGhpcy5odHRwU2VydmVyLmNsb3NlKGNhbGxiYWNrKVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZlclxyXG4iXX0=